import { sample } from 'lodash';
import { User } from '../db/entity/User';
import { getUsername } from '../utils';

export const PLUS_TRIGGERS = ['+', '–°–ü–°', '–î–Ø–ö–£–Æ', '–û–†–£', '–ü–õ–Æ–°', 'üëç', '–¢–£–ü–ê –õ–ò–ö–ï'];
export const MINUS_TRIGGERS = ['-', '–î–ê–£–ù', 'üëé'];


export const karmaPlus = async (ctx) => {
	const { message, replyWithMarkdown, userRepository } = ctx;
	if (!message.reply_to_message) return;
	let userTo = await userRepository.findOne(
		{
			id: message.reply_to_message.from.id,
			chatId: message.reply_to_message.chat.id,
		},
	) || userRepository.create({
		id: message.reply_to_message.from.id,
		chatId: message.reply_to_message.chat.id,
	});
	let userFrom = await userRepository.findOne(
		{
			id: message.from.id,
			chatId: message.chat.id,
		},
	) || userRepository.create({
		id: message.from.id,
		chatId: message.chat.id,
	});

	if (userTo.id === userFrom.id) {
		return replyWithMarkdown(`–Ω–∞–π—Å —Ç—Ä–∞–π, –æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞`);
	}

	if (userFrom.lastVote && (new Date().valueOf() - userFrom.lastVote.valueOf()) < 1000 * 60 * 5) {
		return replyWithMarkdown(`–ù–û–¢ –†–ï–î–ò`);
	}

/*	if (userFrom.karma < 10) {
		return replyWithMarkdown(`–∫–∞—Ä–º–∞ –º–µ–Ω—å—à–µ 10... –∑–µ–º–ª—è —Ç–µ–±–µ –ø—É—Ö–æ–º, –±—Ä–∞—Ç–∏—à–∫–∞`);
	}*/

	const oldKarma = userTo.karma;
	userTo.karma += 1;
	userTo.username = getUsername(message.reply_to_message.from, false);

	userFrom.lastVote = new Date();
	userFrom.username = getUsername(message.from, false);

	await userRepository.persist([ userTo, userFrom ]);

	replyWithMarkdown(sample([
		`_${userFrom.username}_ (${userFrom.karma}) –¥–∞–ª —Ä–æ—Ñ–ª–∞–Ω _${getUsername(message.reply_to_message.from)}_ (${oldKarma} => *${userTo.karma}*)`,
	]));
};

export const karmaMinus = async ctx => {
	const { message, replyWithMarkdown, userRepository } = ctx;
	if (!message.reply_to_message) return;
	let userTo = await userRepository.findOne(
		{
			id: message.reply_to_message.from.id,
			chatId: message.reply_to_message.chat.id,
		},
	) || userRepository.create({
		id: message.reply_to_message.from.id,
		chatId: message.reply_to_message.chat.id,
	});
	let userFrom = await userRepository.findOne(
		{
			id: message.from.id,
			chatId: message.chat.id,
		},
	) || userRepository.create({
		id: message.from.id,
		chatId: message.chat.id,
	});

	if (userTo.id === userFrom.id) {
		return replyWithMarkdown(`–Ω–∞–π—Å —Ç—Ä–∞–π, –æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞`);
	}

	if (userFrom.lastVote && (new Date().valueOf() - userFrom.lastVote.valueOf()) < 1000 * 60 * 5) {
		return replyWithMarkdown(`–ù–û–¢ –†–ï–î–ò`);
	}

/*	if (userFrom.karma < 10) {
		return replyWithMarkdown(`–∫–∞—Ä–º–∞ –º–µ–Ω—å—à–µ 10... –∑–µ–º–ª—è —Ç–µ–±–µ –ø—É—Ö–æ–º, –±—Ä–∞—Ç–∏—à–∫–∞`);
	}*/

	const oldKarma = userTo.karma;
	userTo.karma -= 1;
	userTo.username = getUsername(message.reply_to_message.from, false);

	userFrom.lastVote = new Date();
	userFrom.username = getUsername(message.from, false);

	await userRepository.persist([ userTo, userFrom ]);

	replyWithMarkdown(sample([
		`_${userFrom.username}_ (${userFrom.karma}) –∑–∞–ª–∏–ª —Å–æ–ª—è—Ä—ã _${getUsername(message.reply_to_message.from)}_ (${oldKarma} => *${userTo.karma}*)`,
	]));
};