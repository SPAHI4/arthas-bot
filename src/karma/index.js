import { sample, random } from 'lodash';
import { User } from '../db/entity/User';
import { esc, getUsername } from '../utils';

export const PLUS_TRIGGERS = ['+', '–°–ü–°', '–î–Ø–ö–£–Æ', '–û–†–£', '–ü–õ–Æ–°', 'üëç', '–¢–£–ü–ê –õ–ò–ö–ï'];
export const MINUS_TRIGGERS = ['-', '–ú–ò–ù–£–°', '–î–ê–£–ù', 'üëé'];


export const karmaPlus = async (ctx) => {
	const { message, replyWithHTML, userRepository } = ctx;
	if (!message.reply_to_message) return;
	let userTo = await userRepository.findOne(
		{
			id: message.reply_to_message.from.id,
			chatId: message.reply_to_message.chat.id,
		},
	) || userRepository.create({
		id: message.reply_to_message.from.id,
		chatId: message.reply_to_message.chat.id,
	});
	let userFrom = await userRepository.findOne(
		{
			id: message.from.id,
			chatId: message.chat.id,
		},
	) || userRepository.create({
		id: message.from.id,
		chatId: message.chat.id,
	});

	if (userTo.id === userFrom.id) {
		return replyWithHTML(`–Ω–∞–π—Å —Ç—Ä–∞–π, –æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞`);
	}

	if (process.env.NODE_ENV === 'production' && userFrom.lastVote && (new Date().valueOf() - userFrom.lastVote.valueOf()) < 1000 * 60 * 10) {
		return replyWithHTML(`–ù–û–¢ –†–ï–î–ò`);
	}

	if (userFrom.karma < -10) {
		return replyWithHTML(`–∫–∞—Ä–º–∞ –º–µ–Ω—å—à–µ 10... –∑–µ–º–ª—è —Ç–µ–±–µ –ø—É—Ö–æ–º, –±—Ä–∞—Ç–∏—à–∫–∞`);
	}

	const oldKarma = userTo.karma;
	userTo.karma += 1;
	userTo.username = getUsername(message.reply_to_message.from, false);

	userFrom.lastVote = new Date();
	userFrom.username = getUsername(message.from, false);

	await userRepository.persist([ userTo, userFrom ]);

	replyWithHTML(sample([
		`<i>${userFrom.username}</i> (${userFrom.karma}) –¥–∞–ª —Ä–æ—Ñ–ª–∞–Ω <i>${userTo.username}</i> (${oldKarma} ‚Üí <b>${userTo.karma}</b>)`,
	]));
};

export const karmaMinus = async ctx => {
	const { message, replyWithHTML, userRepository } = ctx;
	if (!message.reply_to_message) return;
	let userTo = await userRepository.findOne(
		{
			id: message.reply_to_message.from.id,
			chatId: message.reply_to_message.chat.id,
		},
	) || userRepository.create({
		id: message.reply_to_message.from.id,
		chatId: message.reply_to_message.chat.id,
	});
	let userFrom = await userRepository.findOne(
		{
			id: message.from.id,
			chatId: message.chat.id,
		},
	) || userRepository.create({
		id: message.from.id,
		chatId: message.chat.id,
	});

	if (userTo.id === userFrom.id) {
		return replyWithHTML(`–Ω–∞–π—Å —Ç—Ä–∞–π, –æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞`);
	}

	if (process.env.NODE_ENV === 'production' && userFrom.lastVote && (new Date().valueOf() - userFrom.lastVote.valueOf()) < 1000 * 60 * 10) {
		return replyWithHTML(`–ù–û–¢ –†–ï–î–ò`);
	}

	if (userFrom.karma < -10) {
		return replyWithHTML(`–∫–∞—Ä–º–∞ –º–µ–Ω—å—à–µ 10... –∑–µ–º–ª—è —Ç–µ–±–µ –ø—É—Ö–æ–º, –±—Ä–∞—Ç–∏—à–∫–∞`);
	}

	if (!random(0, 3)) {
		userTo.username = getUsername(message.reply_to_message.from, false);
		userTo.karma += 5;

		const oldKarma = userFrom.karma;
		userFrom.karma -= 5;
		userFrom.username = getUsername(message.from, false);
		userFrom.lastVote = new Date();

		await userRepository.persist([ userTo, userFrom ]);

		return replyWithHTML(`–≥—É—á—á–∏ –ª–∏–Ω–∑—ã <i>${userTo.username}</i> –æ—Ç—Ä–∞–∑–∏–ª–∏ —Ö–µ–π—Ç <i>${userFrom.username}</i> (${oldKarma} ‚Üí <b>${userFrom.karma}</b>)`);
	}

	const oldKarma = userTo.karma;
	userTo.karma -= 1;
	userTo.username = getUsername(message.reply_to_message.from, false);

	userFrom.lastVote = new Date();
	userFrom.username = getUsername(message.from, false);

	await userRepository.persist([ userTo, userFrom ]);

	replyWithHTML(sample([
		`<i>${userFrom.username}</i> (${userFrom.karma}) –∑–∞–ª–∏–ª —Å–æ–ª—è—Ä—ã <i>${userTo.username}</i> (${oldKarma} ‚Üí <b>${userTo.karma}</b>)`,
	]));
};

const getIcon = i => {
	if (i === 1) {
		return 'ü•á';
	}
	if (i === 2) {
		return 'ü•à';
	}
	if (i === 3) {
		return 'ü•â';
	} else {
		return `${i}.`;
	}
}

export const topLaddera = async ctx => {
	let top = await ctx.userRepository
		.createQueryBuilder('user')
		.where('user.chatId = :chatId', { chatId: ctx.message.chat.id })
		.orderBy("user.karma", "DESC")
		// .setLimit(10)
		.getMany();

	top = top.map((user, i) => `${getIcon(i + 1)} ${user.username} (<b>${user.karma || 0}</b>)`);
	
	let display = top.slice(5);
	display.push('...', Math.max(top.length - 5, 5)), 
		
	return ctx.replyWithHTML(`–¢–æ–ø-3 –ª–∞–¥–¥–µ—Ä–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ–≥–æ —á—è—Ç–∏–∫–∞:\n\n${display.join('\n')}`);
}
