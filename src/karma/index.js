import { sample, random } from 'lodash';
import { compose } from 'telegraf';
import { differenceInMinutes } from 'date-fns';

import { limiter, replyOnly, withReplyUser, withUser } from '../utils';

const IS_PROD = process.env.NODE_ENV === 'production';

export const PLUS_TRIGGERS = [ '+', '–°–ü–°', '–î–Ø–ö–£–Æ', '–û–†–£', 'LUL', '–ü–õ–Æ–°', 'üëç', '–¢–£–ü–ê –õ–ò–ö–ï', '–¢–£–¢ –°–´–ì–õ–´', '–¢–£–¢ –°–´–ì–õ–´+++', '–ö–õ–ï–í–´–ô –ù–ò–ö', '–°–ü–†–ê–í–ï–î–õ–ò–í–û', '–°–û–ì–õ–´', '–°–û–õ–ò–î–ê–†–ï–ù', 'roflanOru', '–ò–ó–í–ï–ù–ò', '–ò–ó–í–ò–ù–ò' ];
export const MINUS_TRIGGERS = [ '-', '–ú–ò–ù–£–°', '–°–û–°–ò', '–î–ï–ë–ò–õ', '–î–ò–ù–ê–•', 'üëé', '–°–ê–°–ê–¢', '–î–ï–ë–ò–ö' ];
export const KARMA_POMOIKA = -20;
export const VOTE_COOLDOWN = 5;


const karmaPlusImpl = async (ctx) => {
	const { message, replyWithHTML, replyWithHTMLQuote, userRepository } = ctx;
	let userTo = ctx.replyUser;
	let userFrom = ctx.user;

	if (IS_PROD && userFrom.lastVote && differenceInMinutes(new Date(), userFrom.lastVote) < VOTE_COOLDOWN) {
		return replyWithHTMLQuote(sample([
			`–ù–û–¢ –†–ï–î–ò`,
			`–ù–û–¢ –≠–ù–ê–§ –ú–ê–ù–ê`,
		]));
	}

	if (userFrom.karma < KARMA_POMOIKA) {
		return replyWithHTMLQuote(`–±–∞–ª–∞–Ω—Å —Ä–æ—Ñ–ª–æ–≤ –º–µ–Ω—å—à–µ ${KARMA_POMOIKA}... –∑–µ–º–ª—è —Ç–µ–±–µ –ø—É—Ö–æ–º, –±—Ä–∞—Ç–∏—à–∫–∞`);
	}

	const oldKarma = userTo.karma;
	userFrom.lastVote = new Date();
	userTo.karma += userFrom.getVotePoint();

	await userRepository.save([ userTo, userFrom ]);

	replyWithHTML(sample([
		`<i>${userFrom.getName()}</i> (${userFrom.karma}) –¥–∞–ª üí≤ <b>—Ä–æ—Ñ–ª–∞–Ω–∫–æ–π–Ω</b> <i>${userTo.getName()}</i> (${oldKarma} ‚Üí <b>${userTo.karma}</b>)`,
	]));
};

export const karmaPlus = compose([
	limiter,
	replyOnly([
		`–Ω–∞–π—Å —Ç—Ä–∞–π, –æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞`,
	]),
	withUser,
	withReplyUser,
	karmaPlusImpl,
]);


const karmaMinusImpl = async ctx => {
	const { replyWithHTML, replyWithHTMLQuote, userRepository } = ctx;
	let userTo = ctx.replyUser;
	let userFrom = ctx.user;

	if (IS_PROD && userFrom.lastVote && differenceInMinutes(new Date(), userFrom.lastVote) < VOTE_COOLDOWN) {
		return replyWithHTMLQuote(sample([
			`–ù–û–¢ –†–ï–î–ò`,
			`–ù–û–¢ –≠–ù–ê–§ –ú–ê–ù–ê`,
			`–ó–≠–¢ –í–û–ó –≠–ù –≠–†–†–û–†`,
		]));
	}

	if (userFrom.karma < KARMA_POMOIKA) {
		return replyWithHTMLQuote(`–±–∞–ª–∞–Ω—Å ${KARMA_POMOIKA}... –ª–µ–∂–∞—Ç—å + –ª–µ–∂–∞—Ç—å`);
	}

	if (!random(0, 4)) {
		userTo.karma += 8;

		const oldKarma = userFrom.karma;
		userFrom.karma -= Math.max(Math.floor(userFrom.karma / 5), 5);
		userFrom.lastVote = new Date();

		await userRepository.save([ userTo, userFrom ]);

		return replyWithHTML(`–≥—É—á—á–∏ –ª–∏–Ω–∑—ã <i>${userTo.getName()}</i> –æ—Ç—Ä–∞–∑–∏–ª–∏ —Ö–µ–π—Ç <i>${userFrom.getName()}</i> (${oldKarma} ‚Üí <b>${userFrom.karma}</b>)`);
	}

	const oldKarma = userTo.karma;
	userTo.karma -= userFrom.getVotePoint();

	userFrom.lastVote = new Date();

	await userRepository.save([ userTo, userFrom ]);

	replyWithHTML(sample([
		`<i>${userFrom.getName()}</i> (${userFrom.karma}) –∑–∞–ª–∏–ª —Å–æ–ª—è—Ä—ã <i>${userTo.getName()}</i> (${oldKarma} ‚Üí <b>${userTo.karma}</b>)`,
	]));
};

export const karmaMinus = compose([
	limiter,
	replyOnly([
		`–¢—ã —á—Ç–æ, –¥–æ–ª–±–æ–µ–±? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—É–∑—É, —É –≤–∞—Å –¥–æ–ª–±–æ–µ–± c–∞–º —Å–µ–±–µ –º–∏–Ω—É—Å—ã —Å—Ç–∞–≤–∏—Ç.`,
	]),
	withUser,
	withReplyUser,
	karmaMinusImpl,
]);

const getIcon = i => {
	if (i === 1) {
		return 'ü•á';
	}
	if (i === 2) {
		return 'ü•à';
	}
	if (i === 3) {
		return 'ü•â';
	} else {
		return `${i}.`;
	}
}

export const topLaddera = async ctx => {
	let top = await ctx.userRepository
		.createQueryBuilder('user')
		.where('user.chatId = :chatId', { chatId: ctx.message.chat.id })
		.orderBy('user.karma', 'DESC')
		// .setLimit(10)
		.getMany();

	top = top.map((user, i) => `${getIcon(i + 1)} ${user.getName()} (<b>${user.karma || 0}</b>)`);

	let display = top.slice(0, 5);
	if (top.length) {
		display.push('\n...\n\n –•–µ—Ä–∞–ª—å–¥—ã ü§¢');
		display.push(...top.slice(-3));
	}

	return ctx.replyWithHTML(`–¢–æ–ø-3 –ª–∞–¥–¥–µ—Ä–∞ –ø–æ –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ–≥–æ —á—è—Ç–∏–∫–∞:\n\n –ò–º–º–æ—Ä—Ç–∞–ª—ã üòé \n${display.join('\n')}`);
};
